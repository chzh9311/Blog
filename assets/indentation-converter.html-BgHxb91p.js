import{_ as o,c as l,e as p,a as s,b as a,d as t,o as i,r as c}from"./app-0xUsLmj9.js";const r="/Blog/assets/header-COrHewBK.png",d="/Blog/assets/indentation-BqrU_UQE.png",u="/Blog/assets/Jamie-DS2LDP_2.png",k="/Blog/assets/online_test-DF6qKQqN.jpg",v="/Blog/assets/test_result-Ckpi9JoP.jpg",m={},b={href:"https://github.com/chzh9311/indentation_converter",target:"_blank",rel:"noopener noreferrer"},g={href:"http://c.runoob.com/front-end/854",target:"_blank",rel:"noopener noreferrer"},h={href:"https://pypi.org/project/autopep8/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/chzh9311/indentation_converter",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.runoob.com/regexp/regexp-syntax.html",target:"_blank",rel:"noopener noreferrer"},y={href:"http://c.runoob.com/front-end/854",target:"_blank",rel:"noopener noreferrer"};function x(q,n){const e=c("ExternalLinkIcon");return i(),l("div",null,[n[12]||(n[12]=p('<p><img src="'+r+'" alt=""></p><h1 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h1><p>前几天下载了别人的 Python 源码，代码作者用的缩进是 2 格，作为一个习惯 4 格空格缩进的人，一不留神就会把层级关系看错。我不禁想到 Python 开发圈子内，tab 党和空格党的友（chun）好（qiang）讨（she）论（jian）。虽然 Python 本身并未强制要求哪种缩进方式，但一旦出现不符合自己习惯的缩进就会切实地影响阅读。</p><p>一般来说，这一问题的解决方案有两种：</p><ol><li><s>说服代码原作者，让他按你的习惯来写代码；</s></li><li>将代码里的缩进方式转换为符合自己习惯的缩进方式。</li></ol><p>显然 1 不合适。于是我尝试自行开发一个小工具来实现这一功能，同时又学习了一下如何利用<strong>正则表达式</strong>来提取所有的缩进字符并替换。这里，我会给出两种解决方案，而使用哪一种也是可以通过一个参数选定的。</p>',6)),s("p",null,[n[1]||(n[1]=a("项目的源代码我已上传至 ")),s("a",b,[n[0]||(n[0]=a("GitHub 仓库")),t(e)]),n[2]||(n[2]=a("，感兴趣的话可以下载下来试试看。"))]),n[13]||(n[13]=p('<h1 id="核心思路和相关代码" tabindex="-1"><a class="header-anchor" href="#核心思路和相关代码"><span>核心思路和相关代码</span></a></h1><p>整个小工具的工作思路就是<strong>读取文件 → 替换缩进 → 输出</strong>。核心自然是对缩进的查找和替换。</p><p>我们希望能提取出所有的缩进字符串，然后将它们替换成我们想要的另一种字符串。那么问题的核心就是查找所有的缩进了。</p><p>缩进字符的特点也很明显。首先它们全部都分布在行的起始到第一个非空字符之间，其次，它们是一串相同序列的重复。把这些缩进字符串用红色标出来，其实规律还是很明显的。</p><p><img src="'+d+`" alt=""></p><p>下面要做的就是根据这些规律寻找缩进字符串并将其替换。这里提供了两种思路：</p><h2 id="一、顺序查找" tabindex="-1"><a class="header-anchor" href="#一、顺序查找"><span>一、顺序查找</span></a></h2><p>这是最简单粗暴的解决方案，其实现代码如下。函数中的 4 个参数我也打了一张表放到下面：</p><table><thead><tr><th>参数</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td><code>in_f</code></td><td>读取目标文件的文件流（读）</td><td><code>in_f = open(&#39;path/to/file&#39;, &#39;r&#39;)</code></td></tr><tr><td><code>out_f</code></td><td>输出的文件流（写）</td><td><code>out_f = open(&#39;path/to/file&#39;, &#39;w&#39;)</code></td></tr><tr><td><code>prev_ind</code></td><td>原文件缩进方式使用的字符串</td><td><code>&#39;\\t&#39;</code>，<code>&#39; &#39;</code>，<code>&#39; &#39;</code></td></tr><tr><td><code>target_ind</code></td><td>目标缩进方式的缩进字符串</td><td>同上</td></tr></tbody></table><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">search_sub</span><span class="token punctuation">(</span>in_f<span class="token punctuation">,</span> out_f<span class="token punctuation">,</span> prev_ind<span class="token punctuation">,</span> target_ind<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># 逐行读取文件</span></span>
<span class="line">        line <span class="token operator">=</span> in_f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># 判断是否为 EOF，是则退出。</span></span>
<span class="line">        <span class="token keyword">if</span> line <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">break</span></span>
<span class="line">        cnt <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># 查找和替换</span></span>
<span class="line">        <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">while</span> line<span class="token punctuation">[</span>cnt<span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>prev_ind<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">(</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>prev_ind<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> prev_ind<span class="token punctuation">:</span></span>
<span class="line">                cnt <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">        <span class="token keyword">except</span> IndexError<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">pass</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># 输出</span></span>
<span class="line">        out_f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>cnt<span class="token operator">*</span>target_ind <span class="token operator">+</span> line<span class="token punctuation">[</span>cnt<span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>prev_ind<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体的思路就是：对每一行文本，从起始位置开始重复以下过程：</p><ul><li>取和 <code>prev_ind</code> 等长的字符串与 <code>prev_ind</code> 比较。 <ul><li>如果不同，或该行剩余字符数小于 <code>prev_ind</code> 的长度，则立即终止循环；</li><li>如果相同，则计数 <code>cnt</code> 加一，继续往后取等长字符串与 <code>prev_ind</code> 比较。</li></ul></li></ul><p>很明显啦，这里 <code>cnt</code> 计数的值就是缩进的等级，也就意味着这一行在正文前插入了多少个缩进字符串。得到了这个数字之后，下面只需要把 <code>cnt</code> 个 <code>target_ind</code> 插入正文前，就得到这一行的转换结果啦。</p><h2 id="二、正则表达式" tabindex="-1"><a class="header-anchor" href="#二、正则表达式"><span>二、正则表达式</span></a></h2><p>正则表达式最大的好处就是<s>看起来高大上</s>简洁。下面是用这种方式实现的代码：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">re_sub</span><span class="token punctuation">(</span>in_f<span class="token punctuation">,</span> out_f<span class="token punctuation">,</span> prev_ind<span class="token punctuation">,</span> target_ind<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 参数的含义和前一节是一样的，就不解释了。</span></span>
<span class="line">    <span class="token comment"># 读取文件内所有文本，这里不需要逐行处理了哦。</span></span>
<span class="line">    text <span class="token operator">=</span> in_f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 关键！构建匹配用的 pattern.</span></span>
<span class="line">    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&#39;^%s|((?&lt;=^%s+)%s)&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>prev_ind<span class="token punctuation">,</span> prev_ind<span class="token punctuation">,</span> prev_ind<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        flags<span class="token operator">=</span>re<span class="token punctuation">.</span>M</span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 查找替换</span></span>
<span class="line">    cvt_text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> target_ind<span class="token punctuation">,</span> text<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 输出</span></span>
<span class="line">    out_f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>cvt_text<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看吧，删掉注释再写的紧凑一些，就<strong>只有 4 行有效代码</strong>了！甚至构建 <code>pattern</code> 和查找替换这两行还能合并成一行，其简洁性可见一斑。</p><p>但是！但是！这区区 4 行代码，却比第一种方法的 11 行代码多花了我不知道多少倍的时间 TAT</p><p>Jamie Zawinski 曾经说过一句很好玩的话：</p><blockquote><p>有些人遇到了一个问题，他们想：“我知道了，我要用正则表达式。” 现在他们有两个问题了。</p></blockquote><p><img src="`+u+`" alt=""></p><p>天才如 Jamie 也不得不承认，想写出简洁的正则表达式从来都不是什么轻松的事情。</p><p>探索（baidu）的过程就不放这里了，直接说结果。整个函数最重要的也就只有这一行，也就是匹配缩进用的正则表达式：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token string">&#39;^%s|((?&lt;=^%s+)%s)&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>prev_ind<span class="token punctuation">,</span> prev_ind<span class="token punctuation">,</span> prev_ind<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>首先，就算你从没接触过正则，主要你系统学习过 Python，就应该认识 <code>%s</code>，它和后面的 <code>% prev_ind</code> 在一块儿表示格式化的输出。<code>%s</code> 对应的格式就是字符串，也就是只需要把 <code>prev_ind</code> 替换掉表达式里的 <code>%s</code>，它就是一个真正意义上的正则表达式了。</p><p>整个表达式用到的符号的含义如下：</p><ul><li><code>^</code>：匹配文本起始。在多行模式下（在最后的 <code>flags</code> 中指定 <code>re.M</code>），也会匹配每个 <code>\\n</code> 后面的位置，即每一行的起始；</li><li><code>|</code>：或，即前后两者只要出现其一就算成功的匹配；</li><li><code>()</code>：括号内的部分作为一个整体；</li><li><code>+</code>：匹配前面的表达式至少 1 次；</li><li><code>?&lt;=</code>：这个符号用于修饰后面的 <code>^%s+</code>，表示其匹配结果要出现在最终匹配结果之前而不计入最终的匹配结果。在正则表达式中，这类实际并进入匹配结果的修饰符被称为<strong>零宽断言</strong>。</li></ul><p>以 <code>|</code> 为分界来看看匹配的思路是什么。前面的 <code>^%s</code> 表示出现在行首的缩进字符串，即这一部分匹配的是第一级缩进。</p><p>后面的有两层括号。内部的一层，包含一个零宽断言，表示匹配结果的前面应该出现的是和 <code>^%s+</code> 匹配的字符串，也就是任意级的缩进。第二层括号里在第一层的基础上加了 <code>%s</code>，也就是匹配结果本身应该是一个缩进字符串。所以这里匹配的就是在任意级缩进后面跟着的缩进字符串。</p><p>简单理解，就是把所有的缩进分为了<strong>位于每行开头的缩进</strong>和<strong>位于每行中间的缩进</strong>。</p>`,30)),s("p",null,[n[4]||(n[4]=a("用")),s("a",g,[n[3]||(n[3]=a("在线工具")),t(e)]),n[5]||(n[5]=a("测试一下，效果还是不错的："))]),n[14]||(n[14]=p('<p><img src="'+k+`" alt=""></p><p>不过要注意的一点是，代码里使用的 <code>re</code> 并非 Python 自带的正则表达库，而是 <code>regex</code> 库，前者是不支持宽度不定的后发断言（即 <code>?&lt;=%s+</code>）的。</p><h1 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h1><p>从 GitHub 下载代码后，只要保证你的 Python 环境中有 <code>argparse</code> 和 <code>regex</code> 就可以正常运行啦，如果你不知道有么有，那么直接打开命令行或者终端，键入</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pip <span class="token function">install</span> argparse regex</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>pip</code> 会自动检查，如果没有就会安装。</p><p>利用 <code>argparse</code> 我定义了一些可以在外部指定的参数如下，每个参数都对应有缩写。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span></span>
<span class="line">    description<span class="token operator">=</span><span class="token string">&quot;arguments for converting indentations&quot;</span><span class="token punctuation">)</span></span>
<span class="line">parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;-f&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--file&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;path to the file&quot;</span><span class="token punctuation">)</span></span>
<span class="line">parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;-p&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--prev&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">&#39;default_prev_indent&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;the previous indentation to be converted&quot;</span><span class="token punctuation">)</span></span>
<span class="line">parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;-t&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--target&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">&#39;default_target_indent&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;the target indentation to convert to&quot;</span><span class="token punctuation">)</span></span>
<span class="line">parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;-a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--appendix&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">&#39;appendix&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;what to append to the converted file&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，使用方法就很简单了。在 <code>ind_cvt.py</code> 同级目录下打开终端，键入</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">python ind_cvt.py <span class="token parameter variable">-f</span> path/to/file.extension <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>prev_ind<span class="token operator">&gt;</span> <span class="token parameter variable">-t</span> <span class="token operator">&lt;</span>target_ind<span class="token operator">&gt;</span> <span class="token parameter variable">-a</span> <span class="token operator">&lt;</span>your appendix<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>举个例子，对项目自带的测试文件进行操作：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">python ind_cvt.py <span class="token parameter variable">-f</span> test_files/test1.txt <span class="token parameter variable">-p</span> <span class="token string">&#39;  &#39;</span> <span class="token parameter variable">-t</span> <span class="token string">&#39;    &#39;</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;_converted&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>就会在 test1.py 的同级目录下生成 test1_converted.py 里面是将原文件的 2 空格缩进全部变成 4 空格缩进后的结果。</p><p>两个测试都转换为 4 空格缩进的结果如下图所示。左侧为原文件，右侧是转换的结果。这是 Atom 的默认表示方法，即 <code>·</code> 表示空格，<code>¤</code> 表示 <code>\\r</code>，<code>¬</code> 表示 <code>\\n</code>，<code>»</code> 表示 <code>\\t</code>。</p><p><img src="`+v+`" alt=""></p><p>另外，除了 <code>-f</code> 参数指定文件外，其余参数均有默认值，可以缺省。默认值在 config.py 文件里面以字典形式存储，是可以调节的：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;appendix&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;_cvt&#39;</span><span class="token punctuation">,</span>                 <span class="token comment"># 对应参数 -a 或 --appendix 的默认值</span></span>
<span class="line">          <span class="token string">&#39;default_prev_indent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;  &#39;</span><span class="token punctuation">,</span>        <span class="token comment"># 对应参数 -p 或 --prev     的默认值</span></span>
<span class="line">          <span class="token string">&#39;default_target_indent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;    &#39;</span><span class="token punctuation">,</span>    <span class="token comment"># 对应参数 -t 或 --target   的默认值</span></span>
<span class="line">          <span class="token string">&#39;method&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;re&#39;</span>                      <span class="token comment"># 不对应参数，用于方式选择：&#39;re&#39; 表示正则，&#39;search&#39; 表示搜索</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h1>`,18)),s("p",null,[n[7]||(n[7]=a("这个项目最开始我并没有打算传到 GitHub 上面。一方面因为这个功能不难实现，其心就是第二节列出的两个函数，整个项目的有效代码目前并不超过 100 行；另一方面则是因为一些编辑器（比如 VS Code）或者其它的现有工具（比如 ")),s("a",h,[n[6]||(n[6]=a("autopep8")),t(e)]),n[8]||(n[8]=a("）已经提供了类似的功能。可是，为了实现完整的功能又不得不包含一些外围的开发，如参数解析、文件读取等等。把所有的代码放进文章里会显得没有重点，所以我只放了核心部分的实现。而为了让代码能够被完整获取，我就选择了最方便的方案，就是传到 GitHub 上了。"))]),n[15]||(n[15]=s("p",null,"总之希望能有所帮助啦，感谢你看到这里 ❤",-1)),n[16]||(n[16]=s("h1",{id:"相关链接",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#相关链接"},[s("span",null,"相关链接")])],-1)),s("ul",null,[s("li",null,[s("a",_,[n[9]||(n[9]=a("项目地址 - Indentation Converter")),t(e)])]),s("li",null,[s("a",f,[n[10]||(n[10]=a("正则表达式 – 语法 | 菜鸟教程 (runoob.com)")),t(e)])]),s("li",null,[s("a",y,[n[11]||(n[11]=a("正则表达式在线测试 | 菜鸟工具 (runoob.com)")),t(e)])])])])}const P=o(m,[["render",x],["__file","indentation-converter.html.vue"]]),j=JSON.parse('{"path":"/blogs/Tech/indentation-converter.html","title":"Python 小工具开发 —— 缩进方式转换","lang":"en-US","frontmatter":{"title":"Python 小工具开发 —— 缩进方式转换","tags":["Python"],"categories":["技术指南"],"date":"2021-07-03T00:00:00.000Z"},"headers":[{"level":2,"title":"一、顺序查找","slug":"一、顺序查找","link":"#一、顺序查找","children":[]},{"level":2,"title":"二、正则表达式","slug":"二、正则表达式","link":"#二、正则表达式","children":[]}],"git":{},"filePathRelative":"blogs/Tech/indentation-converter.md"}');export{P as comp,j as data};
