import{_ as o,c,e as t,a as s,b as a,d as e,o as l,r as i}from"./app-0xUsLmj9.js";const u="/Blog/assets/99multiply-B6_5Npgz.jpg",r="/Blog/assets/lovePython-BhxAWVrs.jpg",k="/Blog/assets/brot-D5crWYlg.jpg",d={},m={href:"https://baike.baidu.com/item/%E6%9B%BC%E5%BE%B7%E5%8B%83%E7%BD%97%E9%9B%86/4888291?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},b={href:"https://baike.baidu.com/item/%E6%9B%BC%E5%BE%B7%E5%8B%83%E7%BD%97%E9%9B%86/4888291?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},v={href:"https://zhuanlan.zhihu.com/p/28726375",target:"_blank",rel:"noopener noreferrer"};function y(h,n){const p=i("ExternalLinkIcon");return l(),c("div",null,[n[9]||(n[9]=t(`<h1 id="一行-python-可以做到什么" tabindex="-1"><a class="header-anchor" href="#一行-python-可以做到什么"><span>一行 Python 可以做到什么？</span></a></h1><blockquote><p>人生苦短，我用 Python。</p></blockquote><p>简洁是 Python 的一大特点。在初学 Python 的时候，说道 Python 的简洁，最津津乐道的话题就是 “一行 Python 可以做什么”。这个话题其实涵盖相当广泛的概念，但作为一个初学者，最有冲击的自然是自己能理解的，也就是围绕 <code>print</code> 做的一些华丽操作。比如用一行代码打印九九乘法表：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39; &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;%s*%s=%-2s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+u+`" alt=""></p><p>一行代码打印爱心</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;PYTHON&#39;</span><span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">0.05</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">3</span><span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">0.05</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">3</span><span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token keyword">else</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+r+`" alt=""></p><p>甚至是分形：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;*&#39;</span><span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> a<span class="token punctuation">:</span><span class="token keyword">lambda</span> z<span class="token punctuation">,</span>c<span class="token punctuation">,</span>n<span class="token punctuation">:</span>a<span class="token punctuation">(</span>a<span class="token punctuation">,</span>z<span class="token punctuation">,</span>c<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> s<span class="token punctuation">,</span>z<span class="token punctuation">,</span>c<span class="token punctuation">,</span>n<span class="token punctuation">:</span>z <span class="token keyword">if</span> n<span class="token operator">==</span>0else s<span class="token punctuation">(</span>s<span class="token punctuation">,</span>z<span class="token operator">*</span>z<span class="token operator">+</span>c<span class="token punctuation">,</span>c<span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.02</span><span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">0.05j</span><span class="token operator">*</span>y<span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span> <span class="token keyword">else</span><span class="token string">&#39; &#39;</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+k+`" alt=""></p><p>这些代码略有些炫技的嫌疑，但不可否认它们实现的效果确实很惊艳。不过，这些语句拆开来仔细看其实也没有什么神秘的东西，只要掌握两点：<strong>列表解析</strong>和 <strong>lambda 语句</strong>，那你也可以写出自己的“一行打印xxx”。</p><h1 id="循环、条件语句是怎么合并到一行里的" tabindex="-1"><a class="header-anchor" href="#循环、条件语句是怎么合并到一行里的"><span>循环、条件语句是怎么合并到一行里的？</span></a></h1><p>在思考这个问题之前，先来想想为什么会有这样的需求。比如我们看第一个例子，也就是九九乘法表。按照一般的逻辑，这个表应该这样打印：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    formulas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        formulas<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;%s*%s=%-2s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    lines<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>formulas<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整体的结构是两层的嵌套循环，外部每迭代一次，生成一行；内部每迭代一次，生成一个算式。用 <code>join</code> 方法把算式的列表合并成行，再把行的列表合并成整个乘法表打印出来。思路十分明朗。</p><p>但是这里我们用了 7 行，不计最后的打印，我们生成的字符串用到了两行列表初始化，两行 <code>for</code> 循环，以及两行的 <code>join</code> 。那么…… 也不必发问了，毕竟开篇给出的代码已经告诉我们了：这些语句是可以被合并成一行的。这就是 Python 的<strong>列表解析</strong>机制，英文是 <strong>List Comprehension</strong>。它让我们的代码简洁很多，而且在性能上也会有所提升。</p><h2 id="列表解析的基本格式" tabindex="-1"><a class="header-anchor" href="#列表解析的基本格式"><span>列表解析的基本格式</span></a></h2><p>列表解析的基本语法是：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token operator">&lt;</span>表达式<span class="token operator">&gt;</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token operator">&lt;</span>迭代器<span class="token operator">&gt;</span> <span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这句话将会把 <code>i</code> 遍历迭代器，如果符合条件就把 <code>i</code> 代入表达式中附在列表末尾。用伪代码重写一遍来理解一下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">generate_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    List <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token operator">&lt;</span>迭代器<span class="token operator">&gt;</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token operator">&gt;</span><span class="token punctuation">:</span></span>
<span class="line">            List<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token operator">&lt;</span>表达式<span class="token operator">&gt;</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> List</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="几个例子" tabindex="-1"><a class="header-anchor" href="#几个例子"><span>几个例子</span></a></h2><p>最简单的，先从一个 1 ~ 10 的列表感受一下列表解析的用法：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">a <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 上述语句打印出 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这其实没什么特别的，要生成一个 1~10 的列表，完全不需要动用列表解析器。但假如我们要写一个平方数的列表，列表解析的价值就体现出来了：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">a <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token operator">*</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出：[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而表达式里包含的完全可以是更复杂的东西，比如函数：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 很经典的递归教材：阶乘函数。</span></span>
<span class="line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> n <span class="token operator">*</span> factorial<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>factorial<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出：[1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>乃至是对象都可以。</p><p>另外，列表解析还支持逻辑运算。如果在插入列表的时候，我们希望这个列表只包含满足一定条件的项，这就要用到后面的 <code>if</code> 了。比如，接着上面对阶乘的计算，我们只保留奇数的阶乘，就可以这样写：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>factorial<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>但是不满足条件的项我们希望能用另一种方法处理后也加入列表当中，换言之，列表解析能不能加入 <code>else</code> 呢？答案是肯定的。</p><p>但是如果写成这样：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>factorial<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> i<span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Python 就会报错并且拒绝执行。</p><p>正确的做法是把 <code>if</code> 和 <code>else</code> 给提到循环的前面：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>factorial<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> i <span class="token operator">*</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样才能实现一个奇数算阶乘，偶数算平方的列表。</p><p>最后，列表解析是完全支持嵌套的，也就是列表解析最前面的<code>&lt;表达式&gt;</code>是完全可以包含另一个列表解析器的。这就是上面九九乘法表的实现原理。在回来看最开始写的两层循环，我们将其一层层封装起来，看列表解析是怎么简化表达的：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 原本的代码</span></span>
<span class="line">lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    formulas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        formulas<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;%s*%s=%-2s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    lines<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>formulas<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 内部用列表解析简化：</span></span>
<span class="line">lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    lines<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;%s*%s=%-2s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 再将外部的迭代简化掉：</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot; &quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;%s*%s=%-2s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> x<span class="token operator">*</span>y<span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面会输出三组一模一样的乘法表，这就 OK 啦!</p><p>对于打印爱心的操作，只要利用 <code>if</code> <code>else</code>，那就不是什么困难的问题。</p><h1 id="神奇的-lambda" tabindex="-1"><a class="header-anchor" href="#神奇的-lambda"><span>神奇的 lambda</span></a></h1>`,44)),s("p",null,[n[1]||(n[1]=a("仅仅依靠列表解析可以解决九九乘法表，但是对于 ")),s("a",m,[n[0]||(n[0]=a("Manderbrot 集（曼德布罗特集）")),e(p)]),n[2]||(n[2]=a("这种需要不断迭代来判断是否在集合内的图案，单纯的列表解析就有点乏力了。我们完全可以在外部定义一个判断每个点是否在集合内的函数，但如果就是想写在一行以内，又该怎么办呢？开头的代码出现了四次的单词 ")),n[3]||(n[3]=s("code",null,"lambda",-1)),n[4]||(n[4]=a(" 就是我们的答案。"))]),n[10]||(n[10]=t(`<h2 id="lambda-究竟是什么" tabindex="-1"><a class="header-anchor" href="#lambda-究竟是什么"><span>lambda 究竟是什么？</span></a></h2><p><code>lambda</code> 是一种匿名函数的定义标志。匿名函数就是没有名字的函数。基本语法是：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">lambda</span> argument_list<span class="token punctuation">:</span> expression</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意：上面的表达式将会返回一个<strong>函数</strong>，冒号的前后分别是这个函数的<strong>输入参数列表</strong>和<strong>返回值</strong>。我们拿最简单的索引来举个例子：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></span>
<span class="line">f <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 两个语句都会输出 1，也就是 L 的第一个元素。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>lambda</code> 就定义了一个输入为 <code>x</code> ，输出为 <code>x[0]</code> 的函数，等价于下面的函数定义：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，下面来观察一下案例中那串老长老长的 <code>lambda</code> 语句：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token punctuation">(</span><span class="token keyword">lambda</span> a<span class="token punctuation">:</span><span class="token keyword">lambda</span> z<span class="token punctuation">,</span>c<span class="token punctuation">,</span>n<span class="token punctuation">:</span>a<span class="token punctuation">(</span>a<span class="token punctuation">,</span>z<span class="token punctuation">,</span>c<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> s<span class="token punctuation">,</span>z<span class="token punctuation">,</span>c<span class="token punctuation">,</span>n<span class="token punctuation">:</span>z <span class="token keyword">if</span> n<span class="token operator">==</span>0else s<span class="token punctuation">(</span>s<span class="token punctuation">,</span>z<span class="token operator">*</span>z<span class="token operator">+</span>c<span class="token punctuation">,</span>c<span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.02</span><span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">0.05j</span><span class="token operator">*</span>y<span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条只有一行的语句浓缩了 lambda 的很多技巧，有些甚至我自己也是第一次见。这句话虽然看着麻烦，但仍然值得仔细品味。</p><h2 id="lambda-的嵌套" tabindex="-1"><a class="header-anchor" href="#lambda-的嵌套"><span>lambda 的嵌套</span></a></h2><p>有三个括号，看着很是头疼。我们从里到外，一个一个来看。首先，第一个括号里就出现了两个 lambda。这里就是 lambda 的嵌套，也就是在一个 lambda 表达式中引用另一个 lambda 表达式。</p><p>先看内层：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">lambda</span> z<span class="token punctuation">,</span>c<span class="token punctuation">,</span>n<span class="token punctuation">:</span>a<span class="token punctuation">(</span>a<span class="token punctuation">,</span>z<span class="token punctuation">,</span>c<span class="token punctuation">,</span>n<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里 <code>z</code>, <code>c</code>, <code>n</code> 是参数，返回值是 <code>a(a, z, c, n)</code>，所以这个函数写成不匿名的形式就是：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> c<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> a<span class="token punctuation">(</span>a<span class="token punctuation">,</span> z<span class="token punctuation">,</span> c<span class="token punctuation">,</span> n<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可是这里多了一个 <code>a</code> 啊！我们看看 <code>a</code> 是什么，注意到前面的 <code>lambda a :</code>，实际上 <code>a</code> 就是外层函数的输入参数，把这个函数也给包起来，那就是：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> f1</span>
<span class="line"><span class="token comment"># 如果考虑到实际执行，应该把 a 也写进 f1 的参数里，但这里仅仅是伪代码，为了展示输入和输出的，所以就不做这么严谨啦 :-3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来那么我们看第二个括号：<code>(lambda s,z,c,n:z if n==0else s(s,z*z+c,c,n-1))</code>。这里为什么会有个括号呢？相信自己对 Python 的理解，首先排除相乘。这里的括号作用其实是<strong>函数的调用</strong>。可能有点难理解，但用上面的 <code>f2</code> 把 <code>lambda</code> 表达式替换掉再写一遍呢？</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">f2<span class="token punctuation">(</span><span class="token keyword">lambda</span> s<span class="token punctuation">,</span>z<span class="token punctuation">,</span>c<span class="token punctuation">,</span>n<span class="token punctuation">:</span>z <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">else</span> s<span class="token punctuation">(</span>s<span class="token punctuation">,</span>z<span class="token operator">*</span>z<span class="token operator">+</span>c<span class="token punctuation">,</span>c<span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个形式就其内部参数是一个函数，也正好符合 <code>a</code> 的使用形式。我们记上面那个函数是 <code>f3(s, z, c, n)</code>，那么，整个函数用非匿名的方式改写就是：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">f2<span class="token punctuation">(</span>f3<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> f1<span class="token punctuation">:</span> <span class="token keyword">return</span> f3<span class="token punctuation">(</span>f3<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.02</span><span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">0.05j</span><span class="token operator">*</span>y<span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>再重复一遍几个函数的关系：<code>f2</code> 接收函数 <code>f3</code> 作为参数输入，返回函数 <code>f1</code>，<code>f1</code> 再接收最后一个括号里的三个参数作为输入，返回数值。</p><h2 id="lambda-实现递归" tabindex="-1"><a class="header-anchor" href="#lambda-实现递归"><span>lambda 实现递归</span></a></h2><p>在研究 <code>f3</code> 里面 <code>s</code> 的作用，最终发现它竟然作为一个中间量实现了递归时，我感到十分震撼.jpg (但是看懂了)</p><p>众所周知，递归函数是指调用其本身的函数。但是 lambda 有个什么问题呢？对，它根本就没有名字，在定义好之前要怎么调用呢？难道要重新写一遍吗？</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>好像不行…… 换个思路。虽然 lambda 定义的本身是匿名的，但在 lambda 函数内部，传进的参数可是有专门的名字的哦。利用这一点，借助其它 lambda 的帮助，递归就可以实现了。</p><p>为了说明这一点，我们把 <code>f3</code> 的定义给写明白：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">f3</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> z<span class="token punctuation">,</span> c<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> z</span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> s<span class="token punctuation">(</span>s<span class="token punctuation">,</span> z<span class="token operator">*</span>z<span class="token operator">+</span>c<span class="token punctuation">,</span> c<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里 <code>s</code> 是作为函数被调用的，同时也作为参数传入 <code>s</code>。也就是这里，<code>s</code> 既是函数，也是它自己需要的参数。往回看，<code>f3</code> 被传进 <code>f2</code>，在 <code>f2</code> 中影响 <code>f1</code> 的内部运算。对，其实这里的 <code>s</code> 就是第一个括号里面的 <code>a</code>。</p><p>现在你可能发现了，所有的函数，这样一层层嵌套，都是为了写出这个递归。<code>f3</code> 定义了递归的结构，<code>f1</code> 和 <code>f2</code> 则分别接收递归初始值和递归主体函数。可以理解为，<code>f3</code> 到了 <code>f2</code> 内就有了名字，就可以做到将它自己塞进它的第一个参数位置，这样返回得到一个函数就是 <code>f1</code>，也就是一个有递归功能的正常函数了。</p><p>于是，这个冗长的 lambda 所做的事情就是对给定范围内的每一组 <code>(x, y)</code>，按照 $$ z_0=0,\\quad c = 0.02x+0.05jy,\\quad<br> z_{k+1} = z_{k}^2 + c $$ 的关系迭代到 $z_{40}$ 如果 $|z_{40}|&lt;2$ 则将该位置填充成 <code>*</code>，否则将该位置留白为空格。这就得到了熟悉的分形。</p>`,33)),s("p",null,[n[6]||(n[6]=a("Mandelbrot 集的运算详情见")),s("a",b,[n[5]||(n[5]=a("这里")),e(p)]),n[7]||(n[7]=a("。"))]),n[11]||(n[11]=t(`<h1 id="现在你也可以开始秀操作啦" tabindex="-1"><a class="header-anchor" href="#现在你也可以开始秀操作啦"><span>现在你也可以开始秀操作啦！</span></a></h1><p>现在相信你已经对列表解析和 lambda 表达式有了更深入的理解了，那么想要用一行 Python 去打印你想要的图案也不是什么困难的事情了。总结起来就是：</p><ol><li>定义一个函数来判断那些坐标应该打印什么，并用 lambda 压缩成一行；</li><li>用列表解析将遍历坐标的过程压缩到一行。</li></ol><p>虽说这种过度的压缩对于代码可读往往并没有什么提升，但这其中的两个主要思想：列表解析和 lambda 表达式，却是每一个 Python 开发者都需要或多或少地了解乃至掌握的。</p><p>最后的最后，不得不提一提最经典的 one-liner，这句话熔铸了 Tim Peters 对于 Python 的情感。这就是著名的 Python 之禅（Zen of Python），第一次听说的朋友不妨试一试:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> this</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h1>`,7)),s("ul",null,[s("li",null,[s("a",v,[n[8]||(n[8]=a("一行Python代码能做什么？ - 知乎 (zhihu.com)")),e(p)])])])])}const f=o(d,[["render",y],["__file","python-oneliner.html.vue"]]),w=JSON.parse('{"path":"/blogs/Tech/python-oneliner.html","title":"Python-oneliner：列表解析和 lambda 表达式","lang":"en-US","frontmatter":{"title":"Python-oneliner：列表解析和 lambda 表达式","date":"2021-08-31T00:00:00.000Z","tags":["Python"],"categories":["技术指南"]},"headers":[{"level":2,"title":"列表解析的基本格式","slug":"列表解析的基本格式","link":"#列表解析的基本格式","children":[]},{"level":2,"title":"几个例子","slug":"几个例子","link":"#几个例子","children":[]},{"level":2,"title":"lambda 究竟是什么？","slug":"lambda-究竟是什么","link":"#lambda-究竟是什么","children":[]},{"level":2,"title":"lambda 的嵌套","slug":"lambda-的嵌套","link":"#lambda-的嵌套","children":[]},{"level":2,"title":"lambda 实现递归","slug":"lambda-实现递归","link":"#lambda-实现递归","children":[]}],"git":{},"filePathRelative":"blogs/Tech/python-oneliner.md"}');export{f as comp,w as data};
