import{_ as l,c as p,e as a,a as e,b as o,d as s,o as r,r as i}from"./app-0xUsLmj9.js";const d="/Blog/assets/plug-python-run-Crj9UPt_.jpg",m="/Blog/assets/F5cmd-DSEQQE7u.jpg",c="/Blog/assets/command-base-CgKe_9Rl.jpg",h="/Blog/assets/base-error-Cm7ZstE3.jpg",g="/Blog/assets/change-env-DMu0EKTY.jpg",u="/Blog/assets/img-proc-D8Zd92x5.jpg",v="/Blog/assets/program-C6GGpHkm.jpg",y={},b={href:"https://atom.io/packages/atom-python-run",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.csdn.net/appleyuchi/article/details/78966415",target:"_blank",rel:"noopener noreferrer"},A={href:"https://atom.io/packages/atom-python-virtualenv",target:"_blank",rel:"noopener noreferrer"};function k(x,t){const n=i("ExternalLinkIcon");return r(),p("div",null,[t[8]||(t[8]=a('<h2 id="起因" tabindex="-1"><a class="header-anchor" href="#起因"><span>起因</span></a></h2><h3 id="我为什么选择-atom" tabindex="-1"><a class="header-anchor" href="#我为什么选择-atom"><span>我为什么选择 Atom</span></a></h3><p>Atom 在 Windows 的文本编辑器里面可以说是完全拍的上号的，用的人也比较多。我选择 Atom 主要还是因为之前用过 Vim，而 Atom 的 Vim 插件已经把常用功能全部都做到位了，包括 (Ctrl + A / Ctrl + X) 进行数字增减的操作。加上一个 <code>ex-mode</code> 插件实现 <code>:</code> 命令，已经非常贴合 Vim 的使用体验了。 至于为什么不用 Vim 了，因为 Vim 现在更新到 8.2 了，我以前配置的 vimrc 已经搬不过来了（救救孩子，孩子已经看不懂怎么配了 TAT）</p><h3 id="python-开发需求" tabindex="-1"><a class="header-anchor" href="#python-开发需求"><span>Python 开发需求</span></a></h3><p>为了便于管理第三方库，推荐在 Python 开发的时候构建虚拟环境。不过日常使用时，如果不是大项目，跑个作业或者测试程序，甚至可能代码还没有报错信息长，就没必要专门开一个虚拟环境了。 这时问题就来了，我安装的 Python 根目录下没有我想要的包，所以我想用虚拟环境的编译器去跑我的代码，但是我又不想在体验稀烂的 cmd 或者 Anaconda Prompt 里面去用命令跑我的程序，那怎么才能把这个功能集成到 Atom 里面呢？</p><h2 id="相关插件" tabindex="-1"><a class="header-anchor" href="#相关插件"><span>相关插件</span></a></h2><h3 id="运行程序用的-atom-python-run" tabindex="-1"><a class="header-anchor" href="#运行程序用的-atom-python-run"><span>运行程序用的 atom-python-run</span></a></h3>',7)),e("p",null,[t[1]||(t[1]=o("这里我的 Atom 可以跑程序的关键是 ")),e("a",b,[t[0]||(t[0]=e("code",null,"atom-python-run",-1)),s(n)]),t[2]||(t[2]=o(" 这个插件："))]),t[9]||(t[9]=a('<p><img src="'+d+'" alt=""></p><p>这个插件允许你按下 <code>F5</code> 或 <code>F6</code> 就可以执行当前的程序。其实原理很简单，就是执行了一条自定义命令：</p><p><img src="'+m+'" alt=""></p><p>这条命令是可以更改的。改起来也很简单，只需要知道 <code>{file}</code> 代表的是当前文件，而每次按下 <code>F5</code> 都会执行一遍这条指令就好。</p><p>很显然，这个插件无法解决虚拟环境的问题。虽然你大可以把这条指令写明成用虚拟环境的 Python 编译器执行，但是其他插件的工作环境并没有变化。结果就是你写代码的时候 <code>pylint</code> 在不停地告诉你这个包找不到那个包不存在，强迫症当场去世。</p><h3 id="虚拟环境插件尝试" tabindex="-1"><a class="header-anchor" href="#虚拟环境插件尝试"><span>虚拟环境插件尝试</span></a></h3>',6)),e("p",null,[t[5]||(t[5]=o("所以我又去找了别的插件，参考了")),e("a",f,[t[3]||(t[3]=o("这篇文章")),s(n)]),t[6]||(t[6]=o("找到了这个 ")),e("a",A,[t[4]||(t[4]=e("code",null,"atom-python-virtualenv",-1)),s(n)]),t[7]||(t[7]=o("."))]),t[10]||(t[10]=a('<p>博主在 Ubuntu 上搞好像没有问题，但我这 Windows 下却是不行的。尝试修改了很久的参数，却还是不行。最后，我翻到插件作者的说明，发现这个插件<strong>暂时不支持 anaconda 的虚拟环境</strong>！作者写了一个 To-Do list，其中有三项：</p><ul><li>加入对用 pip 安装新包的支持；</li><li>加入对 pip 虚拟环境的支持；</li><li>加入对 conda 虚拟环境的支持。</li></ul><p>也就意味着以上三者，现在都做不到。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><p>如果插件行不通的话，我想到的最简单的方法就是更改整个 Atom 的运行环境。Ubuntu 中 shell 的环境变量是可以继承到其子进程中的，也就是你在终端打开一个新的应用，这个应用的环境变量会继承这个终端的。在 Windows 内应该有类似的特性。</p><p>所以，我尝试从 Anaconda Prompt 中用命令启动 Atom：</p><p><img src="'+c+'" alt=""></p><p>这个 base 环境下是没有 <code>opencv</code> 的，看到这里 <code>import cv2</code> 是报错的，继续运行也会出现错误。</p><p><img src="'+h+'" alt=""></p><p>而当我在 Anaconda Prompt 中更改虚拟环境再打开 Atom 时：</p><p><img src="'+g+'" alt=""></p><p>我发现 <code>pylint</code> 的报错消失了，程序也可以正常运行：</p><p><img src="'+u+'" alt=""></p><p><img src="'+v+`" alt=""></p><p>好诶！虽然这个方法肯定是做不到虚拟环境的热切换，但是本来就是写一个小项目要用，基本也不会有切换虚拟环境的需求，问题解决。</p><p>我这里是用 conda 的虚拟环境作的示例，实际上 pip 的虚拟环境也是一样的道理，只要先更改 shell 的环境变量，再在这个 shell 内执行 <code>atom</code> 命令打开 Atom 就完成了。</p><p>进一步，如果还是感觉这个解决方案需要每次启动都切换环境太麻烦，那么还有吧这两条命令封装起来，变成一个 bat 脚本文件。具体来说，新建一个文本文档，将以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">start /k cmd <span class="token string">&quot;conda activate &lt;your env&gt; &amp;&amp; atom&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输入，并将文档连同其扩展名重命名成一个 bat 文件，例如 <code>atom_venv.bat</code>。你可以把这个文件放在桌面，那么下次你希望启动虚拟环境为 <code>&lt;your env&gt;</code> 的 Atom，那么只需要把命令里的 <code>&lt;your env&gt;</code> 换成你的环境名就好。</p><p>这条命令会打开一个新的命令行窗口，并分别执行引号内 <code>&amp;&amp;</code> 前后的两条指令，感兴趣的话可以查一查相关的脚本编写资料 XD</p><h2 id="完成" tabindex="-1"><a class="header-anchor" href="#完成"><span>完成</span></a></h2><p>Atom， 包括我之前用的 Vim，有一个共同的毛病，就是对 Windows 的支持比不上 Linux。这也很无奈，毕竟两种操作系统最初的目标群体就是不同的，设计理念上就有很大的出入。</p><p>不过呢，两种系统在近年来其实有相互取长补短的意思。撇开 Linux 的人性化界面不说，微软已经为 Windows 10 做出了一个终端。在微软商店里搜索 “Windows Terminal” 即可下载安装。这东西是基于 PowerShell 的，包装得很好，用着自然是比 cmd 舒服多了。支持很多 Terminal 的功能，比如很好用的代码自动补全，还有自己的配置文件，可以保存 Python 的虚拟环境方便下次使用。</p>`,23))])}const w=l(y,[["render",k],["__file","windows-atom-python-venv.html.vue"]]),P=JSON.parse('{"path":"/blogs/Debug/windows-atom-python-venv.html","title":"如何在 Windows 下配置 Atom 的 Python 虚拟环境","lang":"en-US","frontmatter":{"title":"如何在 Windows 下配置 Atom 的 Python 虚拟环境","tags":["Python","Atom"],"categories":["踩坑记录"],"date":"2020-11-19T00:00:00.000Z"},"headers":[{"level":2,"title":"起因","slug":"起因","link":"#起因","children":[{"level":3,"title":"我为什么选择 Atom","slug":"我为什么选择-atom","link":"#我为什么选择-atom","children":[]},{"level":3,"title":"Python 开发需求","slug":"python-开发需求","link":"#python-开发需求","children":[]}]},{"level":2,"title":"相关插件","slug":"相关插件","link":"#相关插件","children":[{"level":3,"title":"运行程序用的 atom-python-run","slug":"运行程序用的-atom-python-run","link":"#运行程序用的-atom-python-run","children":[]},{"level":3,"title":"虚拟环境插件尝试","slug":"虚拟环境插件尝试","link":"#虚拟环境插件尝试","children":[]}]},{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]},{"level":2,"title":"完成","slug":"完成","link":"#完成","children":[]}],"git":{},"filePathRelative":"blogs/Debug/windows-atom-python-venv.md"}');export{w as comp,P as data};
